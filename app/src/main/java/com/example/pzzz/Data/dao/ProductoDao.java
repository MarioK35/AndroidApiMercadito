package com.example.pzzz.Data.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.pzzz.Data.Model.Producto;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PRODUCTO".
*/
public class ProductoDao extends AbstractDao<Producto, Void> {

    public static final String TABLENAME = "PRODUCTO";

    /**
     * Properties of entity Producto.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Folio = new Property(0, String.class, "Folio", false, "FOLIO");
        public final static Property Titulo = new Property(1, String.class, "Titulo", false, "TITULO");
        public final static Property Categoria = new Property(2, String.class, "Categoria", false, "CATEGORIA");
        public final static Property Text = new Property(3, String.class, "text", false, "TEXT");
        public final static Property Precio = new Property(4, String.class, "Precio", false, "PRECIO");
        public final static Property Img = new Property(5, String.class, "img", false, "IMG");
    }


    public ProductoDao(DaoConfig config) {
        super(config);
    }
    
    public ProductoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRODUCTO\" (" + //
                "\"FOLIO\" TEXT," + // 0: Folio
                "\"TITULO\" TEXT," + // 1: Titulo
                "\"CATEGORIA\" TEXT," + // 2: Categoria
                "\"TEXT\" TEXT," + // 3: text
                "\"PRECIO\" TEXT," + // 4: Precio
                "\"IMG\" TEXT);"); // 5: img
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRODUCTO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Producto entity) {
        stmt.clearBindings();
 
        String Folio = entity.getFolio();
        if (Folio != null) {
            stmt.bindString(1, Folio);
        }
 
        String Titulo = entity.getTitulo();
        if (Titulo != null) {
            stmt.bindString(2, Titulo);
        }
 
        String Categoria = entity.getCategoria();
        if (Categoria != null) {
            stmt.bindString(3, Categoria);
        }
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(4, text);
        }
 
        String Precio = entity.getPrecio();
        if (Precio != null) {
            stmt.bindString(5, Precio);
        }
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(6, img);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Producto entity) {
        stmt.clearBindings();
 
        String Folio = entity.getFolio();
        if (Folio != null) {
            stmt.bindString(1, Folio);
        }
 
        String Titulo = entity.getTitulo();
        if (Titulo != null) {
            stmt.bindString(2, Titulo);
        }
 
        String Categoria = entity.getCategoria();
        if (Categoria != null) {
            stmt.bindString(3, Categoria);
        }
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(4, text);
        }
 
        String Precio = entity.getPrecio();
        if (Precio != null) {
            stmt.bindString(5, Precio);
        }
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(6, img);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Producto readEntity(Cursor cursor, int offset) {
        Producto entity = new Producto( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // Folio
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Titulo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Categoria
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // text
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Precio
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // img
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Producto entity, int offset) {
        entity.setFolio(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTitulo(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCategoria(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setText(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPrecio(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setImg(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Producto entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Producto entity) {
        return null;
    }

    @Override
    public boolean hasKey(Producto entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
